/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/4f1ae410-77b2-4b43-b80c-3bde8ac88a19 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int lIGHT_INTENSITY;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// BH1750FVI - Version: Latest
#include <BH1750FVI.h>
#include <WiFiNINA.h>
BH1750FVI BH1750(BH1750FVI::k_DevModeContLowRes);

//please enter your sensitive data in the Secret tab
char ssid[] = "****";
char pass[] = "****";

WiFiClient client;

char   HOST_NAME[] = "maker.ifttt.com";
String queryString = "?value1=57&value2=25";

bool light_available = false;


void setup() {
  
  // initialize WiFi connection
  WiFi.begin(ssid, pass);
  BH1750.begin();
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  while (!Serial);
  
  // Defined in thingProperties.h
  initProperties();
  
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void light_received() {
  String PATH   = "https://maker.ifttt.com/trigger/light_received/json/with/key/bOIO9wsFGyUfFNkLFJ0eQkyOY03LzvDn-xpnRrjocTW"; // change your EVENT-NAME and YOUR-KEY

  // make a HTTP request:
  // send HTTP header
  client.println("GET " + PATH + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println(); // end HTTP header


  while (client.connected()) {
    if (client.available()) {
      // read an incoming byte from the server and print it to serial monitor:
      char c = client.read();
      Serial.print(c);
    }
  }
}

void light_stopped() {
  String PATH   = "https://maker.ifttt.com/trigger/light_received/json/with/key/bOIO9wsFGyUfFNkLFJ0eQkyOY03LzvDn-xpnRrjocTW"; // change your EVENT-NAME and YOUR-KEY

  // make a HTTP request:
  // send HTTP header
  client.println("GET " + PATH + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println(); // end HTTP header


  while (client.connected()) {
    if (client.available()) {
      // read an incoming byte from the server and print it to serial monitor:
      char c = client.read();
      Serial.print(c);
    }
  }
}


void loop() {
  ArduinoCloud.update();
  // Your code here 
  int intensity = BH1750.GetLightIntensity();
  int count = 0;

  Serial.println("Light: " + intensity);
  //  Serial.println(lux);

  if (intensity < 100 && light_available == true )
  {
    count++;
    if (count > 5000)
    {
      while (!Serial);

      // connect to web server on port 80:
      if (client.connect(HOST_NAME, 80)) {
        // if connected:
        Serial.println("Connected to server");
      }
      else {// if not connected:
        Serial.println("connection failed");
      }
      light_stopped();
      client.stop();
      Serial.println();
      Serial.println("disconnected");
      light_available = false;
      count = 0;
    }
  }
  else if (intensity > 100 && light_available == false)
  {
    count++;
    if (count > 5000)
    {
      while (!Serial);

      // connect to web server on port 80:
      if (client.connect(HOST_NAME, 80)) {
        // if connected:
        Serial.println("Connected to server");
      }
      else {// if not connected:
        Serial.println("connection failed");
      }
      light_received();
      client.stop();
      Serial.println();
      Serial.println("disconnected");
      light_available = true;
      count = 0;
    }
  }
}
